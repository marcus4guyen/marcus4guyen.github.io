(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{106:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),s=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=s(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=s(n),u=a,h=b["".concat(i,".").concat(u)]||b[u]||d[u]||r;return n?o.a.createElement(h,c(c({ref:t},p),{},{components:n})):o.a.createElement(h,c({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var p=2;p<r;p++)i[p]=n[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},84:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return s}));var a=n(3),o=n(7),r=(n(0),n(106)),i={title:"Dropdown Behavior",sidebar_label:"Behavior"},c={unversionedId:"behavior",id:"behavior",isDocsHomePage:!1,title:"Dropdown Behavior",description:"Our JavaScript library DocSearch.js",source:"@site/docs/behavior.md",slug:"/behavior",permalink:"/docs/behavior",version:"current",sidebar_label:"Behavior",sidebar:"docs",previous:{title:"Styling DocSearch",permalink:"/docs/styling"},next:{title:"Required configuration",permalink:"/docs/required-configuration"}},l=[{value:"<code>appId</code>",id:"appid",children:[]},{value:"<code>handleSelected</code>",id:"handleselected",children:[]},{value:"<code>queryHook</code>",id:"queryhook",children:[]},{value:"<code>transformData</code>",id:"transformdata",children:[]},{value:"<code>autocompleteOptions</code>",id:"autocompleteoptions",children:[]},{value:"<code>algoliaOptions</code>",id:"algoliaoptions",children:[]}],p={toc:l};function s(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Our JavaScript library ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/algolia/docsearch.js"}),"DocSearch.js"),"\nis a wrapper of the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/algolia/autocomplete.js"}),"Algolia autocomplete.js")," library. This library listens\nto every keystrokes typed in the search input, queries Algolia, and displays the\nresults in a dropdown. Everything is already configured for you to work with\nDocSearch. Our UI library also exposes configuration options you can use to go\neven further. You will discover Algolia out of the box for documentation. Let's\nstart the ",Object(r.b)("strong",{parentName:"p"},"learn as you type")," experience."),Object(r.b)("h2",{id:"appid"},Object(r.b)("inlineCode",{parentName:"h2"},"appId")),Object(r.b)("p",null,"Only required if you're ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/run-your-own"}),"running the DocSearch crawler on your own"),". It\ndefines your own application ID using the ",Object(r.b)("inlineCode",{parentName:"p"},"appId")," key. If you're using the free\nhosted version, you don't need to consider this parameter."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"docsearch({\n  appId: '<YOUR_CUSTOM_APP_ID>',\n  [\u2026],\n});\n")),Object(r.b)("h2",{id:"handleselected"},Object(r.b)("inlineCode",{parentName:"h2"},"handleSelected")),Object(r.b)("p",null,"This method is called when a suggestion is selected (either from a click or a\nkeystroke). By default, DocSearch displays anchor links to the results page. You\ncan override results (also called hits) to add your own behavior. Note that you\ncan already open a new tab thanks to the ",Object(r.b)("inlineCode",{parentName:"p"},"CMD/CTRL + Click")," action."),Object(r.b)("p",null,"The method is called with the following arguments:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"input"),": a reference to the search ",Object(r.b)("inlineCode",{parentName:"p"},"input")," element. It comes with the\n",Object(r.b)("inlineCode",{parentName:"p"},".open()"),", ",Object(r.b)("inlineCode",{parentName:"p"},".close()"),", ",Object(r.b)("inlineCode",{parentName:"p"},".getVal()")," and ",Object(r.b)("inlineCode",{parentName:"p"},".setVal()")," methods.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"event"),": the actual event triggering the selection.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"suggestion"),": the object representing the current selection. It contains a\n",Object(r.b)("inlineCode",{parentName:"p"},".url")," key representing the destination.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"datasetNumber"),": this should always be equal to ",Object(r.b)("inlineCode",{parentName:"p"},"1")," as DocSearch is searching\ninto one dataset at a time. You can ignore this attribute.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"context"),": additional information about the selection. Contains a\n",Object(r.b)("inlineCode",{parentName:"p"},".selectionMethod")," key that can be either ",Object(r.b)("inlineCode",{parentName:"p"},"click"),", ",Object(r.b)("inlineCode",{parentName:"p"},"enterKey"),", ",Object(r.b)("inlineCode",{parentName:"p"},"tabKey")," or\n",Object(r.b)("inlineCode",{parentName:"p"},"blur"),", depending how the suggestion was selected."))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"docsearch({\n  // ...\n  handleSelected: function(input, event, suggestion, datasetNumber, context) {\n    // Prevents the default behavior on click and rather opens the suggestion\n    // in a new tab.\n    if (context.selectionMethod === 'click') {\n      input.setVal('');\n\n      const windowReference = window.open(suggestion.url, '_blank');\n      windowReference.focus();\n    }\n  },\n});\n")),Object(r.b)("p",null,"You can ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://codesandbox.io/s/docsearchjs-open-in-new-tab-tgs2h"}),"try it live on CodeSandbox"),"."),Object(r.b)("h2",{id:"queryhook"},Object(r.b)("inlineCode",{parentName:"h2"},"queryHook")),Object(r.b)("p",null,"This method is called on every keystroke to transform the typed keywords before\nquerying Algolia. By default, it does not do anything, but we provide this hook\nfor you to add your own logic if needed."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"docsearch({\n  [\u2026],\n  queryHook: function(query) {\n    // Transform query, and then return the updated version\n  }\n});\n")),Object(r.b)("h2",{id:"transformdata"},Object(r.b)("inlineCode",{parentName:"h2"},"transformData")),Object(r.b)("p",null,"This method will be called on every hits before displaying them. It doesn't do\nanything by default, but we provide this hook for you to add your own logic and\npre-process the hits returned by Algolia."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"docsearch({\n  [\u2026],\n  transformData: function(hits) {\n    // Transform the list of hits\n  }\n});\n")),Object(r.b)("h2",{id:"autocompleteoptions"},Object(r.b)("inlineCode",{parentName:"h2"},"autocompleteOptions")),Object(r.b)("p",null,"You can pass any options to the underlying\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/algolia/autocomplete.js"}),"Autocomplete.js")," library by using\nthe ",Object(r.b)("inlineCode",{parentName:"p"},"autocompleteOptions")," parameter. You will find the list of all available\nvalues in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/algolia/autocomplete.js#global-options"}),"the official documentation"),"."),Object(r.b)("p",null,"You can also listen to ",Object(r.b)("inlineCode",{parentName:"p"},"autocomplete")," events through the ",Object(r.b)("inlineCode",{parentName:"p"},".autocomplete"),"\nproperty of the ",Object(r.b)("inlineCode",{parentName:"p"},"docsearch")," instance."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"const search = docsearch({\n  [\u2026],\n  autocompleteOptions: {\n    // See https://github.com/algolia/autocomplete.js#global-options\n  }\n});\n\n// See https://github.com/algolia/autocomplete.js#custom-events\nsearch.autocomplete.on('autocomplete:opened', event => {\n});\n")),Object(r.b)("h2",{id:"algoliaoptions"},Object(r.b)("inlineCode",{parentName:"h2"},"algoliaOptions")),Object(r.b)("p",null,"You can forward search parameters to the Algolia API by using the\n",Object(r.b)("inlineCode",{parentName:"p"},"algoliaOptions")," key. You will find all Algolia API options in their ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.algolia.com/doc/api-reference/api-parameters/"}),"own\ndocumentation"),"."),Object(r.b)("p",null,"For example, you might want to increase the number of results displayed in the\ndropdown. ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.algolia.com/doc/api-reference/api-parameters/hitsPerPage/"}),Object(r.b)("inlineCode",{parentName:"a"},"hitsPerPage")," set the number of shown hits"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"docsearch({\n  algoliaOptions: {\n    hitsPerPage: 10,\n    // See https://www.algolia.com/doc/api-reference/api-parameters/\n  },\n});\n")))}s.isMDXComponent=!0}}]);